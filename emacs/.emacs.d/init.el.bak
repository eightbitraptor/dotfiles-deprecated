;; Packages

(require 'cl)
(package-initialize)

(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/"))

(defvar mvh-required-packages
  '(
    moe-theme
    kaolin-themes
    nyan-mode
    company
    flx-ido
    projectile
    grizzl
    ag
    chruby
    enh-ruby-mode
    rust-mode
    haml-mode
    rspec-mode
    scss-mode
    magit
    yaml-mode
    )
  "A list of packages to ensure are installed at launch.")

(defun all-required-packages-installed-p ()
  (loop for p in mvh-required-packages
        when (not (package-installed-p p)) do (return nil)
        finally (return t)))

(defun untracked-installed-packages ()
  (set-difference package-activated-list mvh-required-packages))

(unless (all-required-packages-installed-p)
  (package-refresh-contents)
  (dolist (p mvh-required-packages)
    (when (not (package-installed-p p))
      (package-install p))))


;; Customize Settingss

(setq custom-file "~/.emacs.d/customisations.el")
(load custom-file)


;; Appearance
;; Global settings (defaults)
(load-theme 'kaolin-eclipse)

(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(width . 100))
(setq-default line-spacing 0)
(setq-default cursor-type 'bar)

(toggle-scroll-bar -1)

(menu-bar-mode 0)
(tool-bar-mode 0)

(setq initial-scratch-message "")
(setq inhibit-startup-message t)

(set-face-attribute 'default nil :font "DejaVu Sans Mono 11")


;; Save/Backup file behaviour

(setq auto-save-default nil)
(setq backup-directory-alist
      (list (cons "." (expand-file-name "backup" user-emacs-directory))))
(setq make-backup-files nil)


;; General editing settings

(when window-system
  ((lambda ()
     (global-unset-key "\C-z")
     (global-unset-key "\C-x\C-z"))))

(setq indent-tabs-mode nil)
(setq whitespace-style '(face trailing tabs empty space-after-tab space-before-tab tab-mark))
(global-whitespace-mode t)
(global-linum-mode t)
(fset 'yes-or-no-p 'y-or-n-p)
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

(defun clean-up-buffer-or-region ()
  "Untabifies, indents and deletes trailing whitespace from buffer or region."
  (interactive)
  (save-excursion
    (unless (region-active-p)
      (mark-whole-buffer))
    (untabify (region-beginning) (region-end))
    (save-restriction
      (narrow-to-region (region-beginning) (region-end))
      (delete-trailing-whitespace))))

(defun indent-buffer ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

(defun mvh-indent-buffer-or-region ()
  (interactive)
  (if (region-active-p)
      (indent-region (region-beginning) (region-end))
    (indent-buffer)))

;; switch between different types of quote marks
(defun toggle-quotes ()
  (interactive)
  (save-excursion
    (let ((start (nth 8 (syntax-ppss)))
          (quote-length 0) sub kind replacement)
      (goto-char start)
      (setq sub (buffer-substring start (progn (forward-sexp) (point)))
            kind (aref sub 0))
      (while (char-equal kind (aref sub 0))
        (setq sub (substring sub 1)
              quote-length (1+ quote-length)))
      (setq sub (substring sub 0 (- (length sub) quote-length)))
      (goto-char start)
      (delete-region start (+ start (* 2 quote-length) (length sub)))
      (setq kind (if (char-equal kind ?\") ?\' ?\"))
      (loop for i from 0
            for c across sub
            for slash = (char-equal c ?\\)
            then (if (and (not slash) (char-equal c ?\\)) t nil) do
            (unless slash
              (when (member c '(?\" ?\'))
                (aset sub i
                      (if (char-equal kind ?\") ?\' ?\")))))
      (setq replacement (make-string quote-length kind))
      (insert replacement sub replacement))))

(defun open-line-above ()
  "Open a line above the line the point is at. Then move to that line and indent according to mode"
  (interactive)
  (indent-according-to-mode)
  (move-beginning-of-line 1)
  (newline)
  (previous-line)
  (indent-according-to-mode))


(global-set-key (kbd "C-o") 'open-line-above)
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
(global-set-key (kbd "C-x C-;") 'comment-region)
(global-set-key (kbd "C-x C-'") 'uncomment-region)
(global-set-key (kbd "C-c ;") 'comment-region)
(global-set-key (kbd "C-c '") 'uncomment-region)
(global-set-key (kbd "C-c n") 'clean-up-buffer-or-region)
(global-set-key (kbd "C-c =") 'mvh-indent-buffer-or-region)

;; Enable mouse support

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))

(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] (lambda ()
                              (interactive)
                              (scroll-down 1)))
  (global-set-key [mouse-5] (lambda ()
                              (interactive)
                              (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode t))


;; Projectile/ido settings

(ido-mode t)
(setq ido-enable-flex-matching t)

;; ido mode should ignore case
(setq ido-case-fold t)

(projectile-global-mode)
(setq projectile-enable-caching t)
(setq projectile-completion-system 'grizzl)
(setq projectile-switch-project-action
      (lambda ()
        (interactive)
        (visit-project-tags)
        (projectile-find-file)))


;; Code Completion

(add-hook 'after-init-hook 'global-company-mode)
;;(setq company-idle-delay 0.5)
;;(setq company-minimum-prefix-length 3)

;; Ruby

(require 'chruby)
(chruby "ruby-2.4.1")

(setq ruby-insert-encoding-magic-comment nil)
(setq enh-ruby-add-encoding-comment-on-save nil)

(setq enh-ruby-bounce-deep-indent t)
(setq enh-ruby-hanging-brace-indent-level 2)

(add-hook 'mph-ruby-mode-hook
          (lambda ()
            (interactive)
            (rspec-mode)
            (column-marker-1 80)
            (local-set-key (kbd "RET") 'newline-and-indent)))

(autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("\\.gemspec$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . enh-ruby-mode))

(setq rspec-rake-command "rake")
(setq rspec-use-bundler-when-possible t)
(setq rspec-use-spring-when-possible t)

;; Magit settings

(defun my-magit-status ()
  "Don't split window."
  (interactive)
  (let ((pop-up-windows nil))
    (call-interactively 'magit-status)))

(global-set-key (kbd "<f7>") 'my-magit-status)
(global-set-key (kbd "C-<f7>") 'magit-log)

(setq magit-last-seen-setup-instructions "1.4.0")
(setq magit-push-always-verify nil)


;; Ctags

(defun visit-project-tags ()
  (interactive)
  (let ((tags-file (concat "~/.emacs.d/projectile-tags/"
                          (concat (projectile-project-name)
                                  "-tags"))))
    (if (file-exists-p tags-file)
        (visit-tags-table tags-file)
      (build-ctags-for-project))
    (message (concat "Loaded " tags-file))))

(defun build-ctags-for-project ()
  (interactive)
  (message "building project tags")
  (let ((root (projectile-project-root))
        (tags-file (concat "~/.emacs.d/projectile-tags/"
                           (concat (projectile-project-name)
                                   "-tags"))))
    (write-region "" nil tags-file)
    (shell-command (concat "ctags -R -e --extra=+fq \
--exclude=.nvm \
--exclude=log \
--exclude=db \
--exclude=.bundle \
--exclude=vendor \
--exclude=app/assets \
--exclude=node_modules \
--exclude=test \
--exclude=.git \
--exclude=public \
--exclude=tmp -f " tags-file " " root)))
  (visit-project-tags)
  (message "tags built successfully"))

;; org-wiki

(require 'org-wiki)
(setq org-wiki-location "~/Dropbox/wiki")
(global-set-key (kbd "<f8>") 'org-wiki-panel)
